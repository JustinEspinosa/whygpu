package fun.useless.curses.ui;

import java.util.ArrayList;
import java.util.List;

import fun.useless.curses.ui.util.Vector3;

public class XTermColor256 implements Color {
	
	private static class RGB extends Vector3{
		private int index;
		private RGB(int r,int g,int b,int idx){
			super(r,g,b);
			index=idx;
		}

		public int index(){
			return index;
		}

		@Override
		public String toString() {
			return "R:"+x()+";G:"+y()+";B:"+z();
		}
	}
	
	private static List<RGB> colors = new ArrayList<RGB>();
	
	static{
		colors.add(new RGB(0x00,0x00,0x00,0));
		colors.add(new RGB(0x80,0x00,0x00,1));
		colors.add(new RGB(0x00,0x80,0x00,2));
		colors.add(new RGB(0x80,0x80,0x00,3));
		colors.add(new RGB(0x00,0x00,0x80,4));
		colors.add(new RGB(0x80,0x00,0x80,5));
		colors.add(new RGB(0x00,0x80,0x80,6));
		colors.add(new RGB(0xc0,0xc0,0xc0,7));
		colors.add(new RGB(0x80,0x80,0x80,8));
		colors.add(new RGB(0xff,0x00,0x00,9));
		colors.add(new RGB(0x00,0xff,0x00,10));
		colors.add(new RGB(0xff,0xff,0x00,11));
		colors.add(new RGB(0x00,0x00,0xff,12));
		colors.add(new RGB(0xff,0x00,0xff,13));
		colors.add(new RGB(0x00,0xff,0xff,14));
		colors.add(new RGB(0xff,0xff,0xff,15));
		colors.add(new RGB(0x00,0x00,0x00,16));
		colors.add(new RGB(0x00,0x00,0x5f,17));
		colors.add(new RGB(0x00,0x00,0x87,18));
		colors.add(new RGB(0x00,0x00,0xaf,19));
		colors.add(new RGB(0x00,0x00,0xdf,20));
		colors.add(new RGB(0x00,0x00,0xff,21));
		colors.add(new RGB(0x00,0x5f,0x00,22));
		colors.add(new RGB(0x00,0x5f,0x5f,23));
		colors.add(new RGB(0x00,0x5f,0x87,24));
		colors.add(new RGB(0x00,0x5f,0xaf,25));
		colors.add(new RGB(0x00,0x5f,0xdf,26));
		colors.add(new RGB(0x00,0x5f,0xff,27));
		colors.add(new RGB(0x00,0x87,0x00,28));
		colors.add(new RGB(0x00,0x87,0x5f,29));
		colors.add(new RGB(0x00,0x87,0x87,30));
		colors.add(new RGB(0x00,0x87,0xaf,31));
		colors.add(new RGB(0x00,0x87,0xdf,32));
		colors.add(new RGB(0x00,0x87,0xff,33));
		colors.add(new RGB(0x00,0xaf,0x00,34));
		colors.add(new RGB(0x00,0xaf,0x5f,35));
		colors.add(new RGB(0x00,0xaf,0x87,36));
		colors.add(new RGB(0x00,0xaf,0xaf,37));
		colors.add(new RGB(0x00,0xaf,0xdf,38));
		colors.add(new RGB(0x00,0xaf,0xff,39));
		colors.add(new RGB(0x00,0xdf,0x00,40));
		colors.add(new RGB(0x00,0xdf,0x5f,41));
		colors.add(new RGB(0x00,0xdf,0x87,42));
		colors.add(new RGB(0x00,0xdf,0xaf,43));
		colors.add(new RGB(0x00,0xdf,0xdf,44));
		colors.add(new RGB(0x00,0xdf,0xff,45));
		colors.add(new RGB(0x00,0xff,0x00,46));
		colors.add(new RGB(0x00,0xff,0x5f,47));
		colors.add(new RGB(0x00,0xff,0x87,48));
		colors.add(new RGB(0x00,0xff,0xaf,49));
		colors.add(new RGB(0x00,0xff,0xdf,50));
		colors.add(new RGB(0x00,0xff,0xff,51));
		colors.add(new RGB(0x5f,0x00,0x00,52));
		colors.add(new RGB(0x5f,0x00,0x5f,53));
		colors.add(new RGB(0x5f,0x00,0x87,54));
		colors.add(new RGB(0x5f,0x00,0xaf,55));
		colors.add(new RGB(0x5f,0x00,0xdf,56));
		colors.add(new RGB(0x5f,0x00,0xff,57));
		colors.add(new RGB(0x5f,0x5f,0x00,58));
		colors.add(new RGB(0x5f,0x5f,0x5f,59));
		colors.add(new RGB(0x5f,0x5f,0x87,60));
		colors.add(new RGB(0x5f,0x5f,0xaf,61));
		colors.add(new RGB(0x5f,0x5f,0xdf,62));
		colors.add(new RGB(0x5f,0x5f,0xff,63));
		colors.add(new RGB(0x5f,0x87,0x00,64));
		colors.add(new RGB(0x5f,0x87,0x5f,65));
		colors.add(new RGB(0x5f,0x87,0x87,66));
		colors.add(new RGB(0x5f,0x87,0xaf,67));
		colors.add(new RGB(0x5f,0x87,0xdf,68));
		colors.add(new RGB(0x5f,0x87,0xff,69));
		colors.add(new RGB(0x5f,0xaf,0x00,70));
		colors.add(new RGB(0x5f,0xaf,0x5f,71));
		colors.add(new RGB(0x5f,0xaf,0x87,72));
		colors.add(new RGB(0x5f,0xaf,0xaf,73));
		colors.add(new RGB(0x5f,0xaf,0xdf,74));
		colors.add(new RGB(0x5f,0xaf,0xff,75));
		colors.add(new RGB(0x5f,0xdf,0x00,76));
		colors.add(new RGB(0x5f,0xdf,0x5f,77));
		colors.add(new RGB(0x5f,0xdf,0x87,78));
		colors.add(new RGB(0x5f,0xdf,0xaf,79));
		colors.add(new RGB(0x5f,0xdf,0xdf,80));
		colors.add(new RGB(0x5f,0xdf,0xff,81));
		colors.add(new RGB(0x5f,0xff,0x00,82));
		colors.add(new RGB(0x5f,0xff,0x5f,83));
		colors.add(new RGB(0x5f,0xff,0x87,84));
		colors.add(new RGB(0x5f,0xff,0xaf,85));
		colors.add(new RGB(0x5f,0xff,0xdf,86));
		colors.add(new RGB(0x5f,0xff,0xff,87));
		colors.add(new RGB(0x87,0x00,0x00,88));
		colors.add(new RGB(0x87,0x00,0x5f,89));
		colors.add(new RGB(0x87,0x00,0x87,90));
		colors.add(new RGB(0x87,0x00,0xaf,91));
		colors.add(new RGB(0x87,0x00,0xdf,92));
		colors.add(new RGB(0x87,0x00,0xff,93));
		colors.add(new RGB(0x87,0x5f,0x00,94));
		colors.add(new RGB(0x87,0x5f,0x5f,95));
		colors.add(new RGB(0x87,0x5f,0x87,96));
		colors.add(new RGB(0x87,0x5f,0xaf,97));
		colors.add(new RGB(0x87,0x5f,0xdf,98));
		colors.add(new RGB(0x87,0x5f,0xff,99));
		colors.add(new RGB(0x87,0x87,0x00,100));
		colors.add(new RGB(0x87,0x87,0x5f,101));
		colors.add(new RGB(0x87,0x87,0x87,102));
		colors.add(new RGB(0x87,0x87,0xaf,103));
		colors.add(new RGB(0x87,0x87,0xdf,104));
		colors.add(new RGB(0x87,0x87,0xff,105));
		colors.add(new RGB(0x87,0xaf,0x00,106));
		colors.add(new RGB(0x87,0xaf,0x5f,107));
		colors.add(new RGB(0x87,0xaf,0x87,108));
		colors.add(new RGB(0x87,0xaf,0xaf,109));
		colors.add(new RGB(0x87,0xaf,0xdf,110));
		colors.add(new RGB(0x87,0xaf,0xff,111));
		colors.add(new RGB(0x87,0xdf,0x00,112));
		colors.add(new RGB(0x87,0xdf,0x5f,113));
		colors.add(new RGB(0x87,0xdf,0x87,114));
		colors.add(new RGB(0x87,0xdf,0xaf,115));
		colors.add(new RGB(0x87,0xdf,0xdf,116));
		colors.add(new RGB(0x87,0xdf,0xff,117));
		colors.add(new RGB(0x87,0xff,0x00,118));
		colors.add(new RGB(0x87,0xff,0x5f,119));
		colors.add(new RGB(0x87,0xff,0x87,120));
		colors.add(new RGB(0x87,0xff,0xaf,121));
		colors.add(new RGB(0x87,0xff,0xdf,122));
		colors.add(new RGB(0x87,0xff,0xff,123));
		colors.add(new RGB(0xaf,0x00,0x00,124));
		colors.add(new RGB(0xaf,0x00,0x5f,125));
		colors.add(new RGB(0xaf,0x00,0x87,126));
		colors.add(new RGB(0xaf,0x00,0xaf,127));
		colors.add(new RGB(0xAF,0x00,0xDF,128));
		colors.add(new RGB(0xaf,0x00,0xff,129));
		colors.add(new RGB(0xaf,0x5f,0x00,130));
		colors.add(new RGB(0xaf,0x5f,0x5f,131));
		colors.add(new RGB(0xaf,0x5f,0x87,132));
		colors.add(new RGB(0xaf,0x5f,0xaf,133));
		colors.add(new RGB(0xaf,0x5f,0xdf,134));
		colors.add(new RGB(0xaf,0x5f,0xff,135));
		colors.add(new RGB(0xaf,0x87,0x00,136));
		colors.add(new RGB(0xaf,0x87,0x5f,137));
		colors.add(new RGB(0xaf,0x87,0x87,138));
		colors.add(new RGB(0xaf,0x87,0xaf,139));
		colors.add(new RGB(0xaf,0x87,0xdf,140));
		colors.add(new RGB(0xaf,0x87,0xff,141));
		colors.add(new RGB(0xaf,0xaf,0x00,142));
		colors.add(new RGB(0xaf,0xaf,0x5f,143));
		colors.add(new RGB(0xaf,0xaf,0x87,144));
		colors.add(new RGB(0xaf,0xaf,0xaf,145));
		colors.add(new RGB(0xaf,0xaf,0xdf,146));
		colors.add(new RGB(0xaf,0xaf,0xff,147));
		colors.add(new RGB(0xaf,0xdf,0x00,148));
		colors.add(new RGB(0xaf,0xdf,0x5f,149));
		colors.add(new RGB(0xaf,0xdf,0x87,150));
		colors.add(new RGB(0xaf,0xdf,0xaf,151));
		colors.add(new RGB(0xaf,0xdf,0xdf,152));
		colors.add(new RGB(0xaf,0xdf,0xff,153));
		colors.add(new RGB(0xaf,0xff,0x00,154));
		colors.add(new RGB(0xaf,0xff,0x5f,155));
		colors.add(new RGB(0xaf,0xff,0x87,156));
		colors.add(new RGB(0xaf,0xff,0xaf,157));
		colors.add(new RGB(0xaf,0xff,0xdf,158));
		colors.add(new RGB(0xaf,0xff,0xff,159));
		colors.add(new RGB(0xdf,0x00,0x00,160));
		colors.add(new RGB(0xdf,0x00,0x5f,161));
		colors.add(new RGB(0xdf,0x00,0x87,162));
		colors.add(new RGB(0xdf,0x00,0xaf,163));
		colors.add(new RGB(0xdf,0x00,0xdf,164));
		colors.add(new RGB(0xdf,0x00,0xff,165));
		colors.add(new RGB(0xdf,0x5f,0x00,166));
		colors.add(new RGB(0xdf,0x5f,0x5f,167));
		colors.add(new RGB(0xdf,0x5f,0x87,168));
		colors.add(new RGB(0xdf,0x5f,0xaf,169));
		colors.add(new RGB(0xdf,0x5f,0xdf,170));
		colors.add(new RGB(0xdf,0x5f,0xff,171));
		colors.add(new RGB(0xdf,0x87,0x00,172));
		colors.add(new RGB(0xdf,0x87,0x5f,173));
		colors.add(new RGB(0xdf,0x87,0x87,174));
		colors.add(new RGB(0xdf,0x87,0xaf,175));
		colors.add(new RGB(0xdf,0x87,0xdf,176));
		colors.add(new RGB(0xdf,0x87,0xff,177));
		colors.add(new RGB(0xdf,0xaf,0x00,178));
		colors.add(new RGB(0xdf,0xaf,0x5f,179));
		colors.add(new RGB(0xdf,0xaf,0x87,180));
		colors.add(new RGB(0xdf,0xaf,0xaf,181));
		colors.add(new RGB(0xdf,0xaf,0xdf,182));
		colors.add(new RGB(0xdf,0xaf,0xff,183));
		colors.add(new RGB(0xdf,0xdf,0x00,184));
		colors.add(new RGB(0xdf,0xdf,0x5f,185));
		colors.add(new RGB(0xdf,0xdf,0x87,186));
		colors.add(new RGB(0xdf,0xdf,0xaf,187));
		colors.add(new RGB(0xdf,0xdf,0xdf,188));
		colors.add(new RGB(0xdf,0xdf,0xff,189));
		colors.add(new RGB(0xdf,0xff,0x00,190));
		colors.add(new RGB(0xdf,0xff,0x5f,191));
		colors.add(new RGB(0xdf,0xff,0x87,192));
		colors.add(new RGB(0xdf,0xff,0xaf,193));
		colors.add(new RGB(0xdf,0xff,0xdf,194));
		colors.add(new RGB(0xdf,0xff,0xff,195));
		colors.add(new RGB(0xff,0x00,0x00,196));
		colors.add(new RGB(0xff,0x00,0x5f,197));
		colors.add(new RGB(0xff,0x00,0x87,198));
		colors.add(new RGB(0xff,0x00,0xaf,199));
		colors.add(new RGB(0xff,0x00,0xdf,200));
		colors.add(new RGB(0xff,0x00,0xff,201));
		colors.add(new RGB(0xff,0x5f,0x00,202));
		colors.add(new RGB(0xff,0x5f,0x5f,203));
		colors.add(new RGB(0xff,0x5f,0x87,204));
		colors.add(new RGB(0xff,0x5f,0xaf,205));
		colors.add(new RGB(0xff,0x5f,0xdf,206));
		colors.add(new RGB(0xff,0x5f,0xff,207));
		colors.add(new RGB(0xff,0x87,0x00,208));
		colors.add(new RGB(0xff,0x87,0x5f,209));
		colors.add(new RGB(0xff,0x87,0x87,210));
		colors.add(new RGB(0xff,0x87,0xaf,211));
		colors.add(new RGB(0xff,0x87,0xdf,212));
		colors.add(new RGB(0xff,0x87,0xff,213));
		colors.add(new RGB(0xff,0xaf,0x00,214));
		colors.add(new RGB(0xff,0xaf,0x5f,215));
		colors.add(new RGB(0xff,0xaf,0x87,216));
		colors.add(new RGB(0xff,0xaf,0xaf,217));
		colors.add(new RGB(0xff,0xaf,0xdf,218));
		colors.add(new RGB(0xff,0xaf,0xff,219));
		colors.add(new RGB(0xff,0xdf,0x00,220));
		colors.add(new RGB(0xff,0xdf,0x5f,221));
		colors.add(new RGB(0xff,0xdf,0x87,222));
		colors.add(new RGB(0xff,0xdf,0xaf,223));
		colors.add(new RGB(0xff,0xdf,0xdf,224));
		colors.add(new RGB(0xff,0xdf,0xff,225));
		colors.add(new RGB(0xff,0xff,0x00,226));
		colors.add(new RGB(0xff,0xff,0x5f,227));
		colors.add(new RGB(0xff,0xff,0x87,228));
		colors.add(new RGB(0xff,0xff,0xaf,229));
		colors.add(new RGB(0xff,0xff,0xdf,230));
		colors.add(new RGB(0xff,0xff,0xff,231));
		colors.add(new RGB(0x08,0x08,0x08,232));
		colors.add(new RGB(0x12,0x12,0x12,233));
		colors.add(new RGB(0x1c,0x1c,0x1c,234));
		colors.add(new RGB(0x26,0x26,0x26,235));
		colors.add(new RGB(0x30,0x30,0x30,236));
		colors.add(new RGB(0x3a,0x3a,0x3a,237));
		colors.add(new RGB(0x44,0x44,0x44,238));
		colors.add(new RGB(0x4e,0x4e,0x4e,239));
		colors.add(new RGB(0x58,0x58,0x58,240));
		colors.add(new RGB(0x60,0x60,0x60,241));
		colors.add(new RGB(0x66,0x66,0x66,242));
		colors.add(new RGB(0x76,0x76,0x76,243));
		colors.add(new RGB(0x80,0x80,0x80,244));
		colors.add(new RGB(0x8a,0x8a,0x8a,245));
		colors.add(new RGB(0x94,0x94,0x94,246));
		colors.add(new RGB(0x9e,0x9e,0x9e,247));
		colors.add(new RGB(0xa8,0xa8,0xa8,248));
		colors.add(new RGB(0xb2,0xb2,0xb2,249));
		colors.add(new RGB(0xbc,0xbc,0xbc,250));
		colors.add(new RGB(0xc6,0xc6,0xc6,251));
		colors.add(new RGB(0xd0,0xd0,0xd0,252));
		colors.add(new RGB(0xda,0xda,0xda,253));
		colors.add(new RGB(0xe4,0xe4,0xe4,254));
		colors.add(new RGB(0xee,0xee,0xee,255));
	}
	
	private static RGB findNearestIndex(RGB col){
		double minDist=Double.MAX_VALUE; RGB min = colors.get(0);
		
		for(RGB color:colors){
			double d = col.distance(color);
			if(d<minDist){
				minDist = d;
				min = color;
			}		
		}
		
		return min;
	}
	
	private int index;

	public XTermColor256(int r,int g,int b){
		RGB col = findNearestIndex(new RGB(r,g,b,-1));
		index = col.index();
		
		//System.out.println("For RGB "+r+","+g+","+b);
		//System.out.println("Choosen "+index+"; "+col);
	}
	
	@Override
	public boolean equals(Object obj) {
		if(obj instanceof XTermColor256)
			return index==((XTermColor256)obj).index;
		
		return false;
	}
	
	public int index() {
		return index;
	}

	@Override
	public String toString() {
		return "XTerm256#"+index();
	}
}
